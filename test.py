# import torch
# from transformers import BertForSequenceClassification, AutoTokenizer
#
# LABELS = ['neutral', 'joy', 'sadness', 'anger', 'enthusiasm', 'surprise', 'disgust', 'fear', 'guilt', 'shame']
# LABELS_RU = ['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ', '—Ä–∞–¥–æ—Å—Ç—å', '–≥—Ä—É—Å—Ç—å', '–≥–Ω–µ–≤', '–∏–Ω—Ç–µ—Ä–µ—Å', '—É–¥–∏–≤–ª–µ–Ω–∏–µ', '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', '—Å—Ç—Ä–∞—Ö', '–≤–∏–Ω–∞', '—Å—Ç—ã–¥']
#
# model = BertForSequenceClassification.from_pretrained('Djacon/rubert-tiny2-russian-emotion-detection')
# tokenizer = AutoTokenizer.from_pretrained('Djacon/rubert-tiny2-russian-emotion-detection')
#
#
# # Predicting emotion in text
# # Example: predict_emotion("–°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å!") -> Joy
# @torch.no_grad()
# def predict_emotion(text: str, labels: list = LABELS) -> str:
#     inputs = tokenizer(text, max_length=512, truncation=True, return_tensors='pt')
#     inputs = inputs.to(model.device)
#
#     outputs = model(**inputs)
#
#     pred = torch.nn.functional.sigmoid(outputs.logits)
#     pred = pred.argmax(dim=1)
#
#     return labels[pred[0]].title()
#
#
# # Probabilistic prediction of emotion in a text
# # Example: predict_emotions("–°–µ–≥–æ–¥–Ω—è —Ç–∞–∫–æ–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å!") ->
# # -> {'neutral': 0.229, 'joy': 0.873, 'sadness': 0.045,...}
#
#
#
# def main():
#     try:
#         while True:
#             text = input('Enter Text (`q` for quit): ')
#             if not text:
#                 continue
#             elif text == 'q':
#                 return print('Bye üëã')
#             print('Your emotion is:', predict_emotions(text))
#     except KeyboardInterrupt:
#         print('\nBye üëã')
#
#
import os

import librosa
import numpy as np
import requests
from dotenv import load_dotenv

load_dotenv()

def download_audio(url):
  """
–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ —Å—Å—ã–ª–∫–µ, —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É os.getenv(TEMP_FILES)
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.

Args:
  url: URL-–∞–¥—Ä–µ—Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.

Returns:
  –ü—É—Ç—å –¥–æ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
"""
  filename = os.path.basename(url)
  temp_files_dir = os.getenv("TEMP_FILES")
  file_path = os.path.join(temp_files_dir, filename)
  response = requests.get(url)
  with open(file_path, "wb") as f:
    f.write(response.content)
  return file_path


def get_audio_loudness_per_second_with_intonation_detection(audio_url):
  """
  –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ, —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ os.getenv(TEMP_FILES) –∏ –≤—ã–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤,
  –≥–¥–µ –ø–æ—Å–µ–∫—É–Ω–¥–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å, —Å —É—á–µ—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –æ—Ç–ª–æ–≤—É –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π.

  Args:
    audio_url: URL-–∞–¥—Ä–µ—Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.

  Returns:
    –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –Ω–∞ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–µ –∞—É–¥–∏–æ, —Å —É—á–µ—Ç–æ–º –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π.
  """

  # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
  audio_path = download_audio(audio_url)

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
  y, sr = librosa.load(audio_path)

  # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–µ
  loudness = librosa.feature.rms(y=y, frame_length=sr, hop_length=sr)

  # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π
  pitch = librosa.feature.pitch(y=y, sr=sr)
  pitch_diff = np.diff(pitch)

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è pitch_diff, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
  intonation_threshold = 0.5
  intonation_flags = pitch_diff > intonation_threshold

  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π
  loudness_with_intonation = []
  for i in range(len(loudness)):
    if intonation_flags[i]:
      loudness_with_intonation.append(loudness[i] * 1.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π
    else:
      loudness_with_intonation.append(loudness[i])

  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  return loudness_with_intonation


def get_segment_avg(timestamp: list, volumes: list):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ –æ—Ç timestamp[0] –¥–æ timestamp[1]
    :param timestamp:
    :param volumes:
    :return:
    """
    volumes = volumes[timestamp[0]:timestamp[1]+1]
    avg = sum(volumes) / len(volumes)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ {timestamp[0]}:{timestamp[1]} = {avg}")
    return avg


def get_deviations(audio_url: str, data: dict):
    """
    –ø–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    :param audio_url:
    :param segments:
    :return:
    """
    audio_data = audio_url

    y, sr = librosa.load(audio_data)

    hop_length = sr
    avg_values = []
    for i in range(0, len(y), hop_length):
        avg_value = np.mean(y[i:i + hop_length])
        avg_values.append(avg_value)

    # –í—ã–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å–∏–≤ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print(avg_values)
    avg_volume = sum(avg_values) / len(avg_values)
    print(avg_volume)
    segments = data['chunks']
    segments_avg = list()
    result = list()
    for chunk in segments:
        timestamp: list = chunk['timestamp']
        timestamp[0], timestamp[1] = int(timestamp[0]), int(timestamp[1])
        segment_avg = get_segment_avg(timestamp, avg_values)
        result.append((segment_avg - avg_volume) / avg_volume)
    print(result)
    return result


# [0, 5, 2, 1, 10, 0], —Å—Ä–µ–¥–Ω–µ–µ = 18/6 = 3
# [0, 5], —Å—Ä–µ–¥–Ω–µ–µ = 2.5, 2.5-3=-0.5, -0.5/3=-0.16
# [2, 1], —Å—Ä–µ–¥–Ω–µ–µ = 1.5, 1.5-3=-1.5, -1.5/3=-0.5
# [10, 0], —Å—Ä–µ–¥–Ω–µ–µ = 5, 5-3=2, 2/3=0.66


# [-0.16, -0.5, 0.66]



if __name__ == '__main__':
    url = os.getenv("TEMP_FILES") + "d4565c2e238ee6679befc0a7eb349e.mp3"
    import librosa
    import librosa.display
    import numpy as np
    get_deviations(url, {})
